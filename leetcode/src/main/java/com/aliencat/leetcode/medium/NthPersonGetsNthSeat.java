package com.aliencat.leetcode.medium;

/**
 * 1227. 飞机座位分配概率
 * 有 n 位乘客即将登机，飞机正好有 n 个座位。第一位乘客的票丢了，他随便选了一个座位坐下。
 * 剩下的乘客将会：
 * 如果他们自己的座位还空着，就坐到自己的座位上，
 * 当他们自己的座位被占用时，随机选择其他座位
 * 第 n 位乘客坐在自己的座位上的概率是多少？
 * <p>
 * 示例 1：
 * 输入：n = 1
 * 输出：1.00000
 * 解释：第一个人只会坐在自己的位置上。
 * 示例 2：
 * 输入: n = 2
 * 输出: 0.50000
 * 解释：在第一个人选好座位坐下后，第二个人坐在自己的座位上的概率是 0.5。
 * 提示：
 * 1 <= n <= 10^5
 */
public class NthPersonGetsNthSeat {

    public double nthPersonGetsNthSeat(int n) {
        /**
         * 我们要求的是最后一位乘客 n 最终能坐到自己座位，即 n 号座位的概率
         * 因为 1 号 票丢了，因此分析 1 号 坐不同座位的情况，它有 3 种选择
         * 1、1 号有 1 / n 的概率 坐到 1 号座位，那么不会对 [2, n] 号乘客产生影响，因为它们都有票，那么 n 号乘客坐到自己座位的概率为 1
         * 2、1 号有 1 / n 的概率 坐到 n 号座位，那么 n 号 肯定坐不到 n 号座位，那么概率为 0
         * 3、1 号有 (n - 2) / n 的概率 坐到 [2, n - 1] 号座位，假设是 k 号座位，
         * 那么对于 k 号乘客来说它有 3 种选择
         * 1、k 号有 1 / (n - k + 1) 的概率 坐到 1 号座位，那么不会对其他乘客产生影响，那么 n 号乘客坐到自己座位的概率为 1
         *       （为什么分母是 n - k + 1？ 因为 (1，k] 号位置被坐了，它必定不会去坐，剩下的位置数就是(n - k + 1)）
         * 2、k 号有 1 / (n - k + 1)的概率 坐到 n 号座位，那么 n 号 肯定坐不到 n 号座位，那么概率为 0
         * 3、k 号有 (n - k - 1) / (n - k + 1) 的概率坐到 除 [k+1,n-1]的座位，
         * 假设k=n-2座位,则倒数第二位(即n-1)乘客有1/2的概率不坐到n号座位，那么最后一位乘客此时在n号座位概率即为1/2
         * 递归分析
         * 当 n = 1 时，那么概率必定为 1
         * 当 n != 1时，那么概率必定为0.5
         */
        return n == 1 ? 1 : 0.5;
    }
}
